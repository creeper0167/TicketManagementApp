@model TicketManagementApp.Models.Ticket
@using System.Globalization;

@{
    //Layout = "~/Views/Shared/_DefaultLayout.cshtml";
    Layout = "~/Views/Shared/_DefPage1.cshtml";
    PersianCalendar persianCalendar = new PersianCalendar();
    ViewBag.Title = "TicketDetails";
    int counter = 0;
}

@*<!DOCTYPE html>

    <html dir="rtl">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>@ViewBag.Title - My ASP.NET Application</title>
        <link href="~/Content/Site.css" rel="stylesheet" type="text/css" />
        <link href="~/Content/bootstrap.min.css" rel="stylesheet" type="text/css" />
        <link href="~/Content/style.css" rel="stylesheet" type="text/css" />
        <script src="~/Scripts/modernizr-2.6.2.js"></script>
    </head>*@
<body>
    <div>
        <div class="container">
            <h4 class="text-center">اطلاعات تیکت</h4>
            @*<hr />*@

            <!--table-->
            <table class="table table-bordered">
                <thead class="bg-warning">
                    <tr>
                        <th scope="col">ارسال کننده تیکت</th>
                        <th scope="col">تاریخ ایجاد</th>
                        <th scope="col">فایل ضمیمه</th>
                        <th scope="col">وضعیت تیکت</th>
                    </tr>
                </thead>
                <tbody class="bg-white">
                    <tr>
                        <th scope="row">@Html.DisplayFor(model => model.Account.FullName)</th>
                        <td>
                            @{
                                string date = persianCalendar.GetYear(Model.TicketDate).ToString() + "/" + persianCalendar.GetMonth(Model.TicketDate).ToString() + "/" + persianCalendar.GetDayOfMonth(Model.TicketDate).ToString();
                            }
                            @date
                        </td>
                        <td>
                            <a href="~/TicketAttachments/@Model.TicketAttachment">
                                دانلود فایل ضمیمه
                            </a>
                        </td>
                        <td>@Html.DisplayFor(model => model.TicketStatus)</td>
                    </tr>

                </tbody>
            </table>
        </div>
        <!--end table-->
        @*<div class="row">


            <div class="card">
                <div class="card-header bg-info">
                    پاسخ های تیکت
                </div>
                <div class="card-body">
                    <p class="card-text">
                        @foreach (var item in Model.TicketReply.OrderByDescending(i => i.ReplyId).ToList())
                        {
                            <span>-</span> @Html.DisplayFor(model => item.Text)
                            <hr />
                        }
                    </p>
                </div>
            </div>


        </div>*@
        <div class="overflow-auto p-4" style="height:60vh;overflow:auto;">
            <div class="container">
                @foreach (var item in Model.TicketReply.OrderByDescending(i => i.ReplyId).ToList())
                {
                    counter++;
                    //string className = counter % 2 == 0 ? "col-md-7 float-right" : "col-md-7 float-left";
                    string className = item.Accounts.Role.RoleId == Int32.Parse(Session["RoleID"].ToString()) ? "card float-right col-md-7" : "card col-md-7 float-left";
                    <div class="">



                        <div class="@className">
                            <div class="card-header bg-light d-flex flex-row justify-content-between">
                                @*پاسخ های تیکت*@
                                <div>@item.Accounts.FullName</div>
                                <div>

                                    @{
                                        string dateText = persianCalendar.GetYear(@item.ReplyDate).ToString() + "/" + persianCalendar.GetMonth(@item.ReplyDate).ToString() + "/" + persianCalendar.GetDayOfMonth(@item.ReplyDate).ToString();
                                    }
                                    @dateText
                                </div>
                            </div>
                            <div class="card-body">
                                <p class="card-text">
                                    @*@foreach (var item in Model.TicketReply.OrderByDescending(i => i.ReplyId).ToList())
        {*@
                                    <span class="h6">متن پیام:</span><em>
                                        @Html.DisplayFor(model => item.Text)</em>

                                        @*}*@
                                </p>
                            </div>
                        </div>
                    </div>
                }
                <div class="card col-md-7 float-left">
                    <div class="card-header bg-light">
                        @*پاسخ های تیکت*@
                        <span>@Html.DisplayFor(model => model.Account.FullName)</span>
                    </div>
                    <div class="card-body">
                        <p class="card-text">
                            @*@foreach (var item in Model.TicketReply.OrderByDescending(i => i.ReplyId).ToList())
                    {*@
                            <span class="h6">متن پیام:</span><em> @Html.DisplayFor(model => model.TicketDescription)</em>

                            @*}*@
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <hr />
        <!--فرم پاسخ به تیکت-->
        @* reply box *@
        @if (Model.TicketStatus != "بسته شده")
        {
            <div class="container-fluid">
                <div>
                    @using (Html.BeginForm("TicketReply", "Ticket", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                    <div class="form-horizontal p-4">

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        <div hidden="true" class="form-group m-3">
                            @Html.LabelFor(model => model.TicketID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.TicketID, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.TicketID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div hidden="true" class="form-group m-3">
                            @Html.LabelFor(model => model.AccountID, htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.AccountID, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.AccountID, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group mx-auto">

                            <label class="control-label col-md-3">متن ارسالی</label>
                            @*@Html.LabelFor(model => model.TicketReply, htmlAttributes: new { @class = "control-label col-md-3 " })*@
                            <div class="">
                                <textarea class="form-control" type="text" name="replyText" rows="8"></textarea>
                            </div>
                        </div>

                        <div class="form-group">

                            <input class="btn btn-success" type="submit" value="ارسال پاسخ" />
                            @*@Html.ActionLink("پاسخ", "TicketReplyPost", new {id = Model.TicketID}, htmlAttributes: new { @class = "btn btn-success text-white" , @type="submit"})*@
                            @Html.ActionLink("بستن تیکت", "CloseTicket", new { id = Model.TicketID }, htmlAttributes: new { @class = "btn btn-danger" })
                            @Html.ActionLink("بازگشت", "TicketView", "TicketView", htmlAttributes: new { @class = "btn btn-danger text-white" })

                        </div>

                    </div>
                    }
                </div>
            </div>
        }
        <!--فرم غیرفعال-->
        @if(Model.TicketStatus == "بسته شده"){<div class="container-fluid">
            <div>

                    @Html.AntiForgeryToken()
                    <div class="form-horizontal p-4">

                        <div class="form-group mx-auto">

                            <label class="control-label col-md-3">متن ارسالی</label>
                            @*@Html.LabelFor(model => model.TicketReply, htmlAttributes: new { @class = "control-label col-md-3 " })*@
                            <div class="">
                                <textarea style="resize:none;" class="form-control" type="text" name="replyText" rows="8" readonly></textarea>
                            </div>
                        </div>

                        <div class="form-group">

                            <input class="btn" type="submit" value="ارسال پاسخ" readonly/>
                            @*@Html.ActionLink("پاسخ", "TicketReplyPost", new {id = Model.TicketID}, htmlAttributes: new { @class = "btn btn-success text-white" , @type="submit"})*@
                            @*@Html.ActionLink("بستن تیکت", "CloseTicket", new { id = Model.TicketID }, htmlAttributes: new { @class = "btn btn-danger" })*@
                            @*@Html.ActionLink("بازگشت", "TicketView", "TicketView", htmlAttributes: new { @class = "btn btn-danger text-white" })*@

                        </div>
                    </div>
            </div>
        </div>}
        <!--انتهای فرم غیرفعال-->

        @* end of reply box *@
        <!---->
    </div>
    @*<hr />*@
    <p>
        @*@Html.ActionLink("Edit", "Edit", new { id = Model.TicketID }) |*@
        @*@Html.ActionLink("بازگشت", "TicketView", "", htmlAttributes: new { @class = "btn btn-danger" })*@
    </p>
</body>

@section s{
    <script>
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": false,
            "progressBar": false,
            "positionClass": "toast-bottom-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "0",
            "timeOut": "0",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        }
        $(function () {
            //toastr.success('لطفا آخرین تیکت ثبت شده در سیستم را بررسی کنید','پیغام جدید');
            // Reference the auto-generated proxy for the hub.
            var chat = $.connection.myHub1;
            // Create a function that the hub can call back to display messages.
            chat.client.updateNotificationBar = function () {
                // Add the message to the page.
                alert("notify to all clients");
            };
            chat.client.update = function () {
                toastr.success('لطفا صندوق خود را مجدد باز کنید', 'تیکت جدید دریافت شد');

            };
            // Get the user name and store it to prepend to messages.

            // Set initial focus to message input box.

            // Start the connection.
            $.connection.hub.start().done(function () {
                console.log("connection established");
                // Call the Send method on the hub.
                //$("#alertBtn").click(function () {
                //    chat.server.send();
                //});
            });

        });
                        // This optional function html-encodes messages for display in the page.

    </script>}